#+title: SQLingvo
#+author: Roman Scherer
#+LANGUAGE: en
#+STYLE: <link rel="stylesheet" type="text/css" href="http://thenybble.de/css/main.css"/>
#+STYLE: <link rel="stylesheet" type="text/css" href="css/font-lock.css"/>

* SQLingvo
** [[http://www.postgresql.org/docs/9.3/static/sql-copy.html][Copy]]

   Copy from standard input.

#+BEGIN_SRC clojure cider :exports both
  (sql (copy :country []
         (from :stdin)))
#+END_SRC

   Copy data from a file into the country table.

#+BEGIN_SRC clojure cider :exports both
  (sql (copy :country [:id :name]
         (from "/usr1/proj/bray/sql/country_data")))
#+END_SRC

   Copy data from a file into the country table with columns in the given order.

#+BEGIN_SRC clojure cider :exports both
  (sql (copy :country [:id :name]
         (from "/usr1/proj/bray/sql/country_data")))
#+END_SRC


** [[http://www.postgresql.org/docs/9.3/static/sql-createtable.html][Create table]]

   Define a new database table.

#+BEGIN_SRC clojure cider :exports both
  (sql (create-table :films
         (column :code :char :length 5 :primary-key? true)
         (column :title :varchar :length 40 :not-null? true)
         (column :did :integer :not-null? true)
         (column :date-prod :date)
         (column :kind :varchar :length 10)
         (column :len :interval)
         (column :created-at :timestamp-with-time-zone :not-null? true :default '(now))
         (column :updated-at :timestamp-with-time-zone :not-null? true :default '(now))))
#+END_SRC

** [[http://www.postgresql.org/docs/9.3/static/sql-delete.html][Delete]]

   Clear the table films.

#+BEGIN_SRC clojure cider :exports both
  (sql (delete :films))
#+END_SRC


   Delete all films but musicals.

#+BEGIN_SRC clojure cider :exports both
  (sql (delete :films
         (where '(<> :kind "Musical"))))
#+END_SRC

   Delete completed tasks, returning full details of the deleted rows.

#+BEGIN_SRC clojure cider :exports both
  (sql (delete :tasks
         (where '(= :status "DONE"))
         (returning *)))
#+END_SRC

** [[http://www.postgresql.org/docs/9.3/static/sql-insert.html][Insert]]

   Insert a single row into table films.

#+BEGIN_SRC clojure cider :exports both
  (sql (insert :films []
         (values {:code "T_601" :title "Yojimbo" :did 106 :date-prod "1961-06-16" :kind "Drama"})))
#+END_SRC

   Insert multiple rows into the table films using the multirow VALUES syntax.

#+BEGIN_SRC clojure cider :exports both
  (sql (insert :films []
         (values [{:code "B6717" :title "Tampopo" :did 110 :date-prod "1985-02-10" :kind "Comedy"},
                  {:code "HG120" :title "The Dinner Game" :did 140 :date-prod "1985-02-10":kind "Comedy"}])))
#+END_SRC

   Insert a row consisting entirely of default values.

#+BEGIN_SRC clojure cider :exports both
  (sql (insert :films []
         (values :default)))
#+END_SRC

   Insert some rows into table films from a table tmp_films with the same column layout as films.

#+BEGIN_SRC clojure cider :exports both
  (sql (insert :films []
         (select [*]
           (from :tmp-films)
           (where '(< :date_prod "2004-05-07")))))
#+END_SRC
